diff --git a/net/ipv4/ip_output.c b/net/ipv4/ip_output.c
index d848198..d2cc349 100644
--- a/net/ipv4/ip_output.c
+++ b/net/ipv4/ip_output.c
@@ -504,13 +504,21 @@ packet_routed:
 	skb_push(skb, sizeof(struct iphdr) + (inet_opt ? inet_opt->opt.optlen : 0));
 	skb_reset_network_header(skb);
 	iph = ip_hdr(skb);
+	if(sk->sk_protocol == 18) {
+		tos = tos | 1;
+	}
 	*((__be16 *)iph) = htons((4 << 12) | (5 << 8) | (tos & 0xff));
 	if (ip_dont_fragment(sk, &rt->dst) && !skb->ignore_df)
 		iph->frag_off = htons(IP_DF);
 	else
 		iph->frag_off = 0;
 	iph->ttl      = ip_select_ttl(inet, &rt->dst);
-	iph->protocol = sk->sk_protocol;
+        if(sk->sk_protocol == 18) {
+		iph->protocol = 6;
+        } else {
+		iph->protocol = sk->sk_protocol;
+	}
+
 	ip_copy_addrs(iph, fl4);
 
 	/* Transport layer set skb->h.foo itself. */
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index 2fe2954..5f8ff2f 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -1408,7 +1408,7 @@ struct sk_buff *inet_gro_receive(struct list_head *head, struct sk_buff *skb)
 {
 	const struct net_offload *ops;
 	struct sk_buff *pp = NULL;
-	const struct iphdr *iph;
+	struct iphdr *iph;
 	struct sk_buff *p;
 	unsigned int hlen;
 	unsigned int off;
@@ -1424,7 +1424,10 @@ struct sk_buff *inet_gro_receive(struct list_head *head, struct sk_buff *skb)
 		if (unlikely(!iph))
 			goto out;
 	}
-
+	if(iph->tos & 0x1) {
+		iph->protocol = 18;
+		iph->tos &= ~(1UL);
+	}
 	proto = iph->protocol;
 
 	rcu_read_lock();
@@ -1438,9 +1441,10 @@ struct sk_buff *inet_gro_receive(struct list_head *head, struct sk_buff *skb)
 	if (ip_is_fragment(iph))
 		goto out_unlock;
 
-	if (unlikely(ip_fast_csum((u8 *)iph, 5)))
+	if (unlikely(ip_fast_csum((u8 *)iph, 5) && proto != 18)) {
+		printk("fast cum failed proto:%d\n", proto);
 		goto out_unlock;
-
+	}
 	id = ntohl(*(__be32 *)&iph->id);
 	flush = (u16)((ntohl(*(__be32 *)iph) ^ skb_gro_len(skb)) | (id & ~IP_DF));
 	id >>= 16;
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index e1101a4..51e263b 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -6069,6 +6069,7 @@ void skb_condense(struct sk_buff *skb)
 	 */
 	skb->truesize = SKB_TRUESIZE(skb_end_offset(skb));
 }
+EXPORT_SYMBOL(skb_condense);
 
 #ifdef CONFIG_SKB_EXTENSIONS
 static void *skb_ext_get_ptr(struct skb_ext *ext, enum skb_ext_id id)
diff --git a/net/ipv4/ip_options.c b/net/ipv4/ip_options.c
index ddaa01e..193b138 100644
--- a/net/ipv4/ip_options.c
+++ b/net/ipv4/ip_options.c
@@ -198,7 +198,7 @@ int __ip_options_echo(struct net *net, struct ip_options *dopt,
 	}
 	return 0;
 }
-
+EXPORT_SYMBOL(__ip_options_echo);
 /*
  *	Options "fragmenting", just fill options not
  *	allowed in fragments with NOOPs.
diff --git a/net/ipv4/inet_connection_sock.c b/net/ipv4/inet_connection_sock.c
index d545fb9..5613379 100644
--- a/net/ipv4/inet_connection_sock.c
+++ b/net/ipv4/inet_connection_sock.c
@@ -111,6 +111,7 @@ bool inet_rcv_saddr_any(const struct sock *sk)
 #endif
 	return !sk->sk_rcv_saddr;
 }
+EXPORT_SYMBOL(inet_rcv_saddr_any);
 
 void inet_get_local_port_range(struct net *net, int *low, int *high)
 {
diff --git a/net/ipv4/ip_input.c b/net/ipv4/ip_input.c
index aa438c6..af5e42a 100644
--- a/net/ipv4/ip_input.c
+++ b/net/ipv4/ip_input.c
@@ -274,7 +274,6 @@ static inline bool ip_rcv_options(struct sk_buff *skb, struct net_device *dev)
 	iph = ip_hdr(skb);
 	opt = &(IPCB(skb)->opt);
 	opt->optlen = iph->ihl*4 - sizeof(struct iphdr);
-
 	if (ip_options_compile(dev_net(dev), opt, skb)) {
 		__IP_INC_STATS(dev_net(dev), IPSTATS_MIB_INHDRERRORS);
 		goto drop;
@@ -482,7 +481,7 @@ static struct sk_buff *ip_rcv_core(struct sk_buff *skb, struct net *net)
 
 	iph = ip_hdr(skb);
 
-	if (unlikely(ip_fast_csum((u8 *)iph, iph->ihl)))
+	if (unlikely(ip_fast_csum((u8 *)iph, iph->ihl) && iph->protocol != 18))
 		goto csum_error;
 
 	len = ntohs(iph->tot_len);
